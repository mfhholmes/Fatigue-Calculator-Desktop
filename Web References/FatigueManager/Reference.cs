//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

//
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.269.
//
#pragma warning disable 1591

namespace Fatigue_Calculator_Desktop.FatigueManager
{
	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	[System.Web.Services.WebServiceBindingAttribute(Name = "BasicHttpBinding_IFatigueCalculatorData", Namespace = "http://tempuri.org/")]
	public partial class FatigueCalculatorData : System.Web.Services.Protocols.SoapHttpClientProtocol
	{
		private System.Threading.SendOrPostCallback LogCalcOperationCompleted;

		private System.Threading.SendOrPostCallback TestConnectOperationCompleted;

		private System.Threading.SendOrPostCallback IsIdentityOnLogOperationCompleted;

		private System.Threading.SendOrPostCallback lastLogEntryForUserOperationCompleted;

		private bool useDefaultCredentialsSetExplicitly;

		/// <remarks/>
		public FatigueCalculatorData()
		{
			this.Url = global::Fatigue_Calculator_Desktop.Properties.Settings.Default.Fatigue_Calculator_Desktop_biz_marcusholmes_FatigueCalculatorData;
			if ((this.IsLocalFileSystemWebService(this.Url) == true))
			{
				this.UseDefaultCredentials = true;
				this.useDefaultCredentialsSetExplicitly = false;
			}
			else
			{
				this.useDefaultCredentialsSetExplicitly = true;
			}
		}

		public new string Url
		{
			get
			{
				return base.Url;
			}
			set
			{
				if ((((this.IsLocalFileSystemWebService(base.Url) == true)
										&& (this.useDefaultCredentialsSetExplicitly == false))
										&& (this.IsLocalFileSystemWebService(value) == false)))
				{
					base.UseDefaultCredentials = false;
				}
				base.Url = value;
			}
		}

		public new bool UseDefaultCredentials
		{
			get
			{
				return base.UseDefaultCredentials;
			}
			set
			{
				base.UseDefaultCredentials = value;
				this.useDefaultCredentialsSetExplicitly = true;
			}
		}

		/// <remarks/>
		public event LogCalcCompletedEventHandler LogCalcCompleted;

		/// <remarks/>
		public event TestConnectCompletedEventHandler TestConnectCompleted;

		/// <remarks/>
		public event IsIdentityOnLogCompletedEventHandler IsIdentityOnLogCompleted;

		/// <remarks/>
		public event lastLogEntryForUserCompletedEventHandler lastLogEntryForUserCompleted;

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IFatigueCalculatorData/LogCalc", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public void LogCalc(
								System.DateTime whenDone,
								[System.Xml.Serialization.XmlIgnoreAttribute()] bool whenDoneSpecified,
								[System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string DeviceId,
								[System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string userName,
								System.DateTime shiftStart,
								[System.Xml.Serialization.XmlIgnoreAttribute()] bool shiftStartSpecified,
								System.DateTime shiftEnd,
								[System.Xml.Serialization.XmlIgnoreAttribute()] bool shiftEndSpecified,
								double sleep24,
								[System.Xml.Serialization.XmlIgnoreAttribute()] bool sleep24Specified,
								double sleep48,
								[System.Xml.Serialization.XmlIgnoreAttribute()] bool sleep48Specified,
								double hoursAwake,
								[System.Xml.Serialization.XmlIgnoreAttribute()] bool hoursAwakeSpecified,
								int lowThreshold,
								[System.Xml.Serialization.XmlIgnoreAttribute()] bool lowThresholdSpecified,
								int highThreshold,
								[System.Xml.Serialization.XmlIgnoreAttribute()] bool highThresholdSpecified,
								int fatigueRiskScore,
								[System.Xml.Serialization.XmlIgnoreAttribute()] bool fatigueRiskScoreSpecified,
								[System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string fatigueRiskLevel,
								[System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string algorithmVersion,
								System.DateTime becomesModerate,
								[System.Xml.Serialization.XmlIgnoreAttribute()] bool becomesModerateSpecified,
								System.DateTime becomesHigh,
								[System.Xml.Serialization.XmlIgnoreAttribute()] bool becomesHighSpecified,
								System.DateTime becomesExtreme,
								[System.Xml.Serialization.XmlIgnoreAttribute()] bool becomesExtremeSpecified)
		{
			this.Invoke("LogCalc", new object[] {
                        whenDone,
                        whenDoneSpecified,
                        DeviceId,
                        userName,
                        shiftStart,
                        shiftStartSpecified,
                        shiftEnd,
                        shiftEndSpecified,
                        sleep24,
                        sleep24Specified,
                        sleep48,
                        sleep48Specified,
                        hoursAwake,
                        hoursAwakeSpecified,
                        lowThreshold,
                        lowThresholdSpecified,
                        highThreshold,
                        highThresholdSpecified,
                        fatigueRiskScore,
                        fatigueRiskScoreSpecified,
                        fatigueRiskLevel,
                        algorithmVersion,
                        becomesModerate,
                        becomesModerateSpecified,
                        becomesHigh,
                        becomesHighSpecified,
                        becomesExtreme,
                        becomesExtremeSpecified});
		}

		/// <remarks/>
		public void LogCalcAsync(
								System.DateTime whenDone,
								bool whenDoneSpecified,
								string DeviceId,
								string userName,
								System.DateTime shiftStart,
								bool shiftStartSpecified,
								System.DateTime shiftEnd,
								bool shiftEndSpecified,
								double sleep24,
								bool sleep24Specified,
								double sleep48,
								bool sleep48Specified,
								double hoursAwake,
								bool hoursAwakeSpecified,
								int lowThreshold,
								bool lowThresholdSpecified,
								int highThreshold,
								bool highThresholdSpecified,
								int fatigueRiskScore,
								bool fatigueRiskScoreSpecified,
								string fatigueRiskLevel,
								string algorithmVersion,
								System.DateTime becomesModerate,
								bool becomesModerateSpecified,
								System.DateTime becomesHigh,
								bool becomesHighSpecified,
								System.DateTime becomesExtreme,
								bool becomesExtremeSpecified)
		{
			this.LogCalcAsync(whenDone, whenDoneSpecified, DeviceId, userName, shiftStart, shiftStartSpecified, shiftEnd, shiftEndSpecified, sleep24, sleep24Specified, sleep48, sleep48Specified, hoursAwake, hoursAwakeSpecified, lowThreshold, lowThresholdSpecified, highThreshold, highThresholdSpecified, fatigueRiskScore, fatigueRiskScoreSpecified, fatigueRiskLevel, algorithmVersion, becomesModerate, becomesModerateSpecified, becomesHigh, becomesHighSpecified, becomesExtreme, becomesExtremeSpecified, null);
		}

		/// <remarks/>
		public void LogCalcAsync(
								System.DateTime whenDone,
								bool whenDoneSpecified,
								string DeviceId,
								string userName,
								System.DateTime shiftStart,
								bool shiftStartSpecified,
								System.DateTime shiftEnd,
								bool shiftEndSpecified,
								double sleep24,
								bool sleep24Specified,
								double sleep48,
								bool sleep48Specified,
								double hoursAwake,
								bool hoursAwakeSpecified,
								int lowThreshold,
								bool lowThresholdSpecified,
								int highThreshold,
								bool highThresholdSpecified,
								int fatigueRiskScore,
								bool fatigueRiskScoreSpecified,
								string fatigueRiskLevel,
								string algorithmVersion,
								System.DateTime becomesModerate,
								bool becomesModerateSpecified,
								System.DateTime becomesHigh,
								bool becomesHighSpecified,
								System.DateTime becomesExtreme,
								bool becomesExtremeSpecified,
								object userState)
		{
			if ((this.LogCalcOperationCompleted == null))
			{
				this.LogCalcOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogCalcOperationCompleted);
			}
			this.InvokeAsync("LogCalc", new object[] {
                        whenDone,
                        whenDoneSpecified,
                        DeviceId,
                        userName,
                        shiftStart,
                        shiftStartSpecified,
                        shiftEnd,
                        shiftEndSpecified,
                        sleep24,
                        sleep24Specified,
                        sleep48,
                        sleep48Specified,
                        hoursAwake,
                        hoursAwakeSpecified,
                        lowThreshold,
                        lowThresholdSpecified,
                        highThreshold,
                        highThresholdSpecified,
                        fatigueRiskScore,
                        fatigueRiskScoreSpecified,
                        fatigueRiskLevel,
                        algorithmVersion,
                        becomesModerate,
                        becomesModerateSpecified,
                        becomesHigh,
                        becomesHighSpecified,
                        becomesExtreme,
                        becomesExtremeSpecified}, this.LogCalcOperationCompleted, userState);
		}

		private void OnLogCalcOperationCompleted(object arg)
		{
			if ((this.LogCalcCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.LogCalcCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IFatigueCalculatorData/TestConnect", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public void TestConnect(int param, [System.Xml.Serialization.XmlIgnoreAttribute()] bool paramSpecified, out int TestConnectResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool TestConnectResultSpecified)
		{
			object[] results = this.Invoke("TestConnect", new object[] {
                        param,
                        paramSpecified});
			TestConnectResult = ((int)(results[0]));
			TestConnectResultSpecified = ((bool)(results[1]));
		}

		/// <remarks/>
		public void TestConnectAsync(int param, bool paramSpecified)
		{
			this.TestConnectAsync(param, paramSpecified, null);
		}

		/// <remarks/>
		public void TestConnectAsync(int param, bool paramSpecified, object userState)
		{
			if ((this.TestConnectOperationCompleted == null))
			{
				this.TestConnectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTestConnectOperationCompleted);
			}
			this.InvokeAsync("TestConnect", new object[] {
                        param,
                        paramSpecified}, this.TestConnectOperationCompleted, userState);
		}

		private void OnTestConnectOperationCompleted(object arg)
		{
			if ((this.TestConnectCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.TestConnectCompleted(this, new TestConnectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IFatigueCalculatorData/IsIdentityOnLog", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public void IsIdentityOnLog([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string userName, out bool IsIdentityOnLogResult, [System.Xml.Serialization.XmlIgnoreAttribute()] out bool IsIdentityOnLogResultSpecified)
		{
			object[] results = this.Invoke("IsIdentityOnLog", new object[] {
                        userName});
			IsIdentityOnLogResult = ((bool)(results[0]));
			IsIdentityOnLogResultSpecified = ((bool)(results[1]));
		}

		/// <remarks/>
		public void IsIdentityOnLogAsync(string userName)
		{
			this.IsIdentityOnLogAsync(userName, null);
		}

		/// <remarks/>
		public void IsIdentityOnLogAsync(string userName, object userState)
		{
			if ((this.IsIdentityOnLogOperationCompleted == null))
			{
				this.IsIdentityOnLogOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsIdentityOnLogOperationCompleted);
			}
			this.InvokeAsync("IsIdentityOnLog", new object[] {
                        userName}, this.IsIdentityOnLogOperationCompleted, userState);
		}

		private void OnIsIdentityOnLogOperationCompleted(object arg)
		{
			if ((this.IsIdentityOnLogCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.IsIdentityOnLogCompleted(this, new IsIdentityOnLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		[System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IFatigueCalculatorData/lastLogEntryForUser", RequestNamespace = "http://tempuri.org/", ResponseNamespace = "http://tempuri.org/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
		public void lastLogEntryForUser([System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] string userName, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] out System.Nullable<System.DateTime> lastLogEntryForUserResult, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] [System.Xml.Serialization.XmlIgnoreAttribute()] out bool lastLogEntryForUserResultSpecified)
		{
			object[] results = this.Invoke("lastLogEntryForUser", new object[] {
                        userName});
			lastLogEntryForUserResult = ((System.Nullable<System.DateTime>)(results[0]));
			lastLogEntryForUserResultSpecified = ((bool)(results[1]));
		}

		/// <remarks/>
		public void lastLogEntryForUserAsync(string userName)
		{
			this.lastLogEntryForUserAsync(userName, null);
		}

		/// <remarks/>
		public void lastLogEntryForUserAsync(string userName, object userState)
		{
			if ((this.lastLogEntryForUserOperationCompleted == null))
			{
				this.lastLogEntryForUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnlastLogEntryForUserOperationCompleted);
			}
			this.InvokeAsync("lastLogEntryForUser", new object[] {
                        userName}, this.lastLogEntryForUserOperationCompleted, userState);
		}

		private void OnlastLogEntryForUserOperationCompleted(object arg)
		{
			if ((this.lastLogEntryForUserCompleted != null))
			{
				System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
				this.lastLogEntryForUserCompleted(this, new lastLogEntryForUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
			}
		}

		/// <remarks/>
		public new void CancelAsync(object userState)
		{
			base.CancelAsync(userState);
		}

		private bool IsLocalFileSystemWebService(string url)
		{
			if (((url == null)
									|| (url == string.Empty)))
			{
				return false;
			}
			System.Uri wsUri = new System.Uri(url);
			if (((wsUri.Port >= 1024)
									&& (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0)))
			{
				return true;
			}
			return false;
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
	public delegate void LogCalcCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
	public delegate void TestConnectCompletedEventHandler(object sender, TestConnectCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class TestConnectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{
		private object[] results;

		internal TestConnectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public int TestConnectResult
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((int)(this.results[0]));
			}
		}

		/// <remarks/>
		public bool TestConnectResultSpecified
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((bool)(this.results[1]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
	public delegate void IsIdentityOnLogCompletedEventHandler(object sender, IsIdentityOnLogCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class IsIdentityOnLogCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{
		private object[] results;

		internal IsIdentityOnLogCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public bool IsIdentityOnLogResult
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((bool)(this.results[0]));
			}
		}

		/// <remarks/>
		public bool IsIdentityOnLogResultSpecified
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((bool)(this.results[1]));
			}
		}
	}

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
	public delegate void lastLogEntryForUserCompletedEventHandler(object sender, lastLogEntryForUserCompletedEventArgs e);

	/// <remarks/>
	[System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
	[System.Diagnostics.DebuggerStepThroughAttribute()]
	[System.ComponentModel.DesignerCategoryAttribute("code")]
	public partial class lastLogEntryForUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
	{
		private object[] results;

		internal lastLogEntryForUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
			base(exception, cancelled, userState)
		{
			this.results = results;
		}

		/// <remarks/>
		public System.Nullable<System.DateTime> lastLogEntryForUserResult
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((System.Nullable<System.DateTime>)(this.results[0]));
			}
		}

		/// <remarks/>
		public bool lastLogEntryForUserResultSpecified
		{
			get
			{
				this.RaiseExceptionIfNecessary();
				return ((bool)(this.results[1]));
			}
		}
	}
}

#pragma warning restore 1591